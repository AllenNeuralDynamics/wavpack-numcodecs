name: Build WavPack Libraries

on:
  workflow_dispatch:

jobs:
  build:
    name: Build WavPack for glibc ${{ matrix.glibc_version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - glibc_version: '2.31'
            ubuntu_version: '20.04'
          - glibc_version: '2.33'
            ubuntu_version: '21.04'
          - glibc_version: '2.35'
            ubuntu_version: '22.04'
          - glibc_version: '2.36'
            ubuntu_version: '22.10'
          - glibc_version: '2.37'
            ubuntu_version: '23.04'
          - glibc_version: '2.39'
            ubuntu_version: '24.04'
        wavpack_version: ['5.7.0']  # Stick to stable version for now

    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create Dockerfile for glibc build
      run: |
        cat > Dockerfile.build << 'EOF'
        ARG UBUNTU_VERSION
        ARG GLIBC_VERSION
        FROM ubuntu:${UBUNTU_VERSION} as glibc-builder

        ARG GLIBC_VERSION
        ARG UBUNTU_VERSION
        ENV GLIBC_VERSION=${GLIBC_VERSION}

        # Install build dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            wget \
            bzip2 \
            automake \
            libtool \
            gcc-multilib \
            gawk \
            bison \
            python3 \
            gettext \
            texinfo \
            pkg-config \
            file \
            patchelf \
            && ln -s /usr/bin/python3 /usr/bin/python \
            && rm -rf /var/lib/apt/lists/*

        # Create a dedicated user for building
        RUN useradd -m builder
        USER builder
        WORKDIR /home/builder

        # Download and build glibc
        RUN set -x \
            && echo "Building glibc version ${GLIBC_VERSION}" \
            && wget https://ftp.gnu.org/gnu/glibc/glibc-${GLIBC_VERSION}.tar.bz2 \
            && echo "Extracting glibc source..." \
            && tar xjf glibc-${GLIBC_VERSION}.tar.bz2 \
            && mkdir glibc-build \
            && cd glibc-build \
            && echo "Configuring glibc..." \
            && ../glibc-${GLIBC_VERSION}/configure \
                --prefix=/home/builder/glibc-install \
                --disable-werror \
                --enable-add-ons \
                --with-headers=/usr/include \
                --without-selinux \
                > ../configure.log 2>&1 || (cat ../configure.log && false) \
            && echo "Building glibc..." \
            && make -j$(nproc) > ../make.log 2>&1 || (cat ../make.log && false) \
            && echo "Installing glibc..." \
            && make install > ../install.log 2>&1 || (cat ../install.log && false) \
            && echo "glibc build completed successfully"

        # Verify glibc installation
        RUN /home/builder/glibc-install/lib/libc.so.6 --version

        USER root

        ENV PATH=/home/builder/glibc-install/bin:$PATH \
            LD_LIBRARY_PATH=/home/builder/glibc-install/lib:$LD_LIBRARY_PATH \
            CFLAGS="-I/home/builder/glibc-install/include" \
            LDFLAGS="-L/home/builder/glibc-install/lib"

        # Add additional build dependencies for WavPack
        USER root
        RUN apt-get update && apt-get install -y \
            make \
            gcc \
            libtool \
            autoconf \
            && rm -rf /var/lib/apt/lists/*

        # Now build WavPack
        ARG WAVPACK_VERSION
        USER builder
        RUN set -x \
            && echo "Downloading WavPack ${WAVPACK_VERSION}..." \
            && wget https://github.com/dbry/WavPack/releases/download/${WAVPACK_VERSION}/wavpack-${WAVPACK_VERSION}.tar.bz2 \
            && tar xjf wavpack-${WAVPACK_VERSION}.tar.bz2 \
            && cd wavpack-${WAVPACK_VERSION} \
            && echo "Running autoconf..." \
            && autoreconf -fi \
            && echo "Configuring WavPack..." \
            && unset LD_LIBRARY_PATH \
            && ./configure --enable-shared \
                         --prefix=/home/builder/wavpack-install \
                         > ../wavpack-configure.log 2>&1 || (cat ../wavpack-configure.log && false) \
            && echo "Building WavPack..." \
            && make > ../wavpack-make.log 2>&1 || (cat ../wavpack-make.log && false) \
            && echo "Installing WavPack..." \
            && make install > ../wavpack-install.log 2>&1 || (cat ../wavpack-install.log && false)

        USER root

        # Create output directory with the built libraries
        RUN mkdir -p /output/linux-x86_64-glibc${GLIBC_VERSION} \
            && cp /home/builder/wavpack-install/lib/libwavpack.so* /output/linux-x86_64-glibc${GLIBC_VERSION}/ \
            && cp /home/builder/wavpack-install/lib/libwavpack.so /output/linux-x86_64-glibc${GLIBC_VERSION}/libwavpack.so.1 \
            && patchelf --set-rpath '$ORIGIN' /output/linux-x86_64-glibc${GLIBC_VERSION}/*.so* \
            && echo "Built libraries:" \
            && ls -l /output/linux-x86_64-glibc${GLIBC_VERSION}/ \
            && ldd /output/linux-x86_64-glibc${GLIBC_VERSION}/libwavpack.so

        # Clean up build files to reduce image size
        RUN rm -rf \
            /home/builder/glibc-* \
            /home/builder/wavpack-* \
            /var/lib/apt/lists/*
        EOF

    - name: Build Docker image and extract libraries
      run: |
        docker build \
          --build-arg GLIBC_VERSION=${{ matrix.glibc_version }} \
          --build-arg WAVPACK_VERSION=${{ matrix.wavpack_version }} \
          -f Dockerfile.build \
          -t wavpack-builder .
        
        mkdir -p src/wavpack_numcodecs/libraries/${{ matrix.wavpack_version }}
        docker create --name wavpack-container wavpack-builder
        docker cp wavpack-container:/output/. src/wavpack_numcodecs/libraries/${{ matrix.wavpack_version }}/
        docker rm wavpack-container

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wavpack-libs-glibc${{ matrix.glibc_version }}
        path: src/wavpack_numcodecs/libraries/${{ matrix.wavpack_version }}/linux-x86_64-glibc${{ matrix.glibc_version }}

    - name: List built files
      run: |
        ls -la src/wavpack_numcodecs/libraries/${{ matrix.wavpack_version }}/linux-x86_64-glibc${{ matrix.glibc_version }}
